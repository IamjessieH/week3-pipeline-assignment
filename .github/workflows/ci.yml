name: CI/CD Pipeline with mail noti

on:
  push:
    branches: [ main, test, staging ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up JDK 21
      uses: actions/setup-java@v3
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Build with Maven
      run: |
        cd sample_project/bsn-validator
        mvn clean compile
        
    - name: Test with Maven
      run: |
        cd sample_project/bsn-validator
        mvn test
        
    - name: Package with Maven
      run: |
        cd sample_project/bsn-validator
        mvn package

  sonarqube:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: 21
        distribution: 'temurin'
        
    - name: Cache SonarQube packages
      uses: actions/cache@v4
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
        
    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Build and analyze
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      run: |
        cd sample_project/bsn-validator
        mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=week3-pipeline-assignment-JessieH -Dsonar.projectName='week3-pipeline-assignment-JessieH'
      

  email-report:
    needs: [build, sonarqube]
    runs-on: ubuntu-latest
    if: always()  # Run even if previous jobs fail
    
    steps:
    - name: Send Email Report
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: "CI/CD Pipeline Report - ${{ github.event.head_commit.message }}"
        to: ${{ secrets.EMAIL_TO }}
        from: GitHub Actions
        body: |
          üöÄ CI/CD Pipeline Report
          
          üìä Pipeline Status: ${{ job.status }}
          üìÅ Repository: ${{ github.repository }}
          üåø Branch: ${{ github.ref_name }}
          üíæ Commit: ${{ github.sha }}
          üë§ Author: ${{ github.actor }}
          
          üîß Job Results:
          ‚Ä¢ Build: ${{ needs.build.result }}
          ‚Ä¢ SonarQube Analysis: ${{ needs.sonarqube.result }}
          
          üìà SonarQube Code Quality Report:
          ‚Ä¢ Dashboard: http://oege.ie.hva.nl:9001/dashboard?id=week3-pipeline-assignment-JessieH
          ‚Ä¢ Project Status: http://oege.ie.hva.nl:9001/web_api/api/qualitygates/project_status?projectKey=week3-pipeline-assignment-JessieH
          
          üîó View Pipeline Details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          
          üìß This email was automatically generated by your CI/CD pipeline.

  deploy-dev:
    needs: [build, sonarqube]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
      
    - name: Build Docker image
      run: |
        cd sample_project/bsn-validator
        docker build -t bsn-validator:latest .
        
    - name: Deploy to Development
      run: |
        cd sample_project/bsn-validator
        docker-compose -f docker-compose.dev.yml up -d

  deploy-test:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/test' || github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
      
    - name: Build Docker image
      run: |
        cd sample_project/bsn-validator
        docker build -t bsn-validator:test .
        
    - name: Deploy to Test
      run: |
        cd sample_project/bsn-validator
        docker-compose -f docker-compose.yml up -d

  deploy-acc:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging' || github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
      
    - name: Build Docker image
      run: |
        cd sample_project/bsn-validator
        docker build -t bsn-validator:acc .
        
    - name: Deploy to Acceptance
      run: |
        cd sample_project/bsn-validator
        docker-compose -f docker-compose.acc.yml up -d

  deploy-prod:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
      
    - name: Build Docker image
      run: |
        cd sample_project/bsn-validator
        docker build -t bsn-validator:prod .
        
    - name: Deploy to Production
      run: |
        cd sample_project/bsn-validator
        docker-compose -f docker-compose.prod.yml up -d
